#!/usr/bin/env ruby

require 'thor'
require 'navy'
require 'harbourmaster'

class Harbourmaster::Daemon
  attr_reader :options

  def initialize(options)
    @options = {}
    @options[:env] = options[:env]
    @options[:cluster] = options[:cluster]
    @options[:etcd] = options[:etcd] || Navy::Etcd.client(host: ENV['ETCD_PORT_4001_TCP_ADDR'])
    @options.freeze
    @threads = []
  end

  def watch(key)
    logger = Navy::Logger.new(:channel => "harbourmaster")
    init = etcd.get('/')
    last_index = init.etcd_index
    @threads << Thread.new do
      while true do
        begin
          logger.debug "Watching: #{ENV['ETCD_PORT_4001_TCP_ADDR']} #{key}"
          request = etcd.watch(key, :waitIndex => last_index+1,
                               :recursive => true)

          last_index = request.node.modifiedIndex
          Process.fork do
            logger.threaded!
            logger.trace "GOT: #{request.node.key} (#{request.action})"
            begin
              router.route(request, :logger => logger)
            rescue => e
              p "Thread Error", e
              puts e.backtrace.join "\n"
            end
          end
        rescue Net::ReadTimeout
          retry
        rescue => e
          p "Error", e
          puts e.backtrace.join "\n"
          retry
        end
      end
    end
  end

  def wait_on_watchers
    @threads.map(&:join)
  end

  def start
    watch "/navy/queues/containers"
    watch "/navy/containers/"
    watch "/navy/events/containers"
    wait_on_watchers
  end

  private

  def router
    Navy::Router.new(options) do |r|
      r.route '^/navy/containers/:name/:type$', Harbourmaster::ContainerHandler
      r.route '^/navy/queues/containers/:id$', Harbourmaster::DesiredQueueHandler
      r.route '^/navy/events/containers/:id$', Harbourmaster::ContainerEventsHandler
    end
  end

  def etcd
    options[:etcd]
  end
end


class Harbourmaster::CLI < Thor
  desc "start", "Start the Daemon"
  option :env, :default => 'development'
  option :cluster, :default  => 'dev.lvh.me'
  default_task :start

  def start
    puts "Harbourmaster Daemon Starting (env: #{options[:env]}, cluster: #{options[:cluster]})"
    Harbourmaster::Daemon.new(options).start
  end
end

Harbourmaster::CLI.start
